name: Build Docker Image

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      target_port:
        required: false
        type: number
        default: 3300
      # node_base_image:
      #   required: false
      #   type: string
      #   default: python:3.9-slim
      env_file:
        description: 'Use to load environment variable from file'
        required: false
        type: string
      # strict_scan:
      #   required: false
      #   type: string
      #   default: true
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true
      signer_key:
        required: true
      dct_signer_priv_key:
        required: true
      signer_pass:
        required: true
      snyk_token:
        required: true

env:
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}
  # STRICT_SCAN: ${{ inputs.strict_scan || false }}

jobs:
  build-push:
    runs-on: ubuntu-latest

    outputs:
      imageTag: ${{ steps.meta.outputs.tags }}
      node: ${{ steps.manifest_key.outputs.node_value }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set manifest deployement
        id: manifest_key
        run: |
          cd deployment/templates/
          if ${{endsWith(github.event.ref, 'prod')}}
          then
            manifest=$(cat production.yml)
            NODE_BASE=$(echo "$manifest" | yq eval '.node_base_image' -)
            echo "node_value=${NODE_BASE}" >> $GITHUB_ENV
          elif ${{endsWith(github.event.ref, 'dev')}}
          then
            manifest=$(cat development.yml)
            NODE_BASE=$(echo "$manifest" | yq eval '.node_base_image' -)
            echo "node_value=${NODE_BASE}" >> $GITHUB_ENV
          elif ${{endsWith(github.event.ref, 'staging')}}
          then
            manifest=$(cat staging.yml)
            NODE_BASE=$(echo "$manifest" | yq eval '.node_base_image' -)
            echo "node_value=${NODE_BASE}" >> $GITHUB_ENV
          else
            manifest=$(cat release.yml)
            NODE_BASE=$(echo "$manifest" | yq eval '.node_base_image' -)
            echo "node_value=${NODE_BASE}" >> $GITHUB_ENV
          fi
        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Meta
        id: meta
        run: echo "::set-output name=tags::pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" 

      - name: Notice meta
        run: echo "::notice title=meta tag created::${{ steps.meta.outputs.tags }}"

      - name: Set Context Default
        run: docker context use default

      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}

      - name: Build Docker
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          outputs: type=docker
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NODE_BASE=${{ steps.manifest_key.outputs.node_value }}

      - name: Check Build Result
        run: |
          docker images | grep ${{ env.SERVICE_NAME }} > tmp_docker
          if grep -wq ${GITHUB_REF#refs/*/} tmp_docker; then echo "::notice title=image build verified::${{ steps.meta.outputs.tags }} image found" ; else echo "::error title=build error::${{ steps.meta.outputs.tags }} not found"; fi

      - name: Push Docker Image to Container Registry
        run: docker push ${{ steps.meta.outputs.tags }}

      - name: Prune Images
        run: |
          docker context use default
          docker image prune -a -f
          docker rmi -f $(docker images -f "dangling=true" -q) || true
