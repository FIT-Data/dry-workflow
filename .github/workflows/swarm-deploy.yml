name: Deploy Service/Web App

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      published_port:
        required: true
        type: number
      target_port:
        required: false
        type: number
        default: 3300
      compose_file:
        required: false
        type: string
      docker_context:
        required: true
        type: string
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true

env:
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}

jobs:

  define:
    runs-on: ubuntu-latest

    outputs:
      nodeEnv: ${{ steps.nodeEnv.outputs.value }}
      published_port: ${{ steps.manifest.outputs.published_port }}
      target_port: ${{ steps.manifest.outputs.target_port }}
      docker_context: ${{ steps.manifest.outputs.docker_context }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set manifest deployment
        id: manifest
        run: |
          cd deployment/templates/
          if ${{endsWith(github.event.ref, 'prod')}}
          then
            manifest=$(cat production.yml)
            echo "::set-output name=published_port::$(echo "$manifest" | yq eval '.published_port' -)"
            echo "::set-output name=target_port::$(echo "$manifest" | yq eval '.target_port' -)"
            echo "::set-output name=docker_context::$(echo "$manifest" | yq eval '.docker_context' -)"
          elif ${{endsWith(github.event.ref, 'dev')}}
          then
            manifest=$(cat development.yml)
            echo "::set-output name=published_port::$(echo "$manifest" | yq eval '.published_port' -)"
            echo "::set-output name=target_port::$(echo "$manifest" | yq eval '.target_port' -)"
            echo "::set-output name=docker_context::$(echo "$manifest" | yq eval '.docker_context' -)"
          elif ${{endsWith(github.event.ref, 'staging')}}
          then
            manifest=$(cat staging.yml)
            echo "::set-output name=published_port::$(echo "$manifest" | yq eval '.published_port' -)"
            echo "::set-output name=target_port::$(echo "$manifest" | yq eval '.target_port' -)"
            echo "::set-output name=docker_context::$(echo "$manifest" | yq eval '.docker_context' -)"
          else
            manifest=$(cat release.yml)
            echo "::set-output name=published_port::$(echo "$manifest" | yq eval '.published_port' -)"
            echo "::set-output name=target_port::$(echo "$manifest" | yq eval '.target_port' -)"
            echo "::set-output name=docker_context::$(echo "$manifest" | yq eval '.docker_context' -)"
          fi

      - id: nodeEnv
        run: |
          if ${{endsWith(github.event.ref, 'prod')}}
          then
            echo "value=production" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::production"
          elif ${{endsWith(github.event.ref, 'staging')}}
          then
            echo "value=staging" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::staging"
          elif ${{endsWith(github.event.ref, 'release')}}
          then
            echo "value=release" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::release"
          else
            echo "value=development" >> $GITHUB_OUTPUT
            echo "::notice title=NODE_ENV::development"
          fi

      - name: Notice manifest
        run: |
          echo "::notice title=manifest published_port created::${{ steps.manifest.outputs.published_port }}"
          echo "::notice title=manifest target_port created::${{ steps.manifest.outputs.target_port }}"
          echo "::notice title=manifest docker_context created::${{ steps.manifest.outputs.docker_context }}"    
      
  metadata:
    runs-on: ubuntu-latest 

    outputs:
      imageTag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Docker Meta
        id: meta
        run: echo "tags=pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT 

      - name: Notice Meta
        run: echo "::notice title=meta tag created::${{ steps.meta.outputs.tags }}"

  swarm-deploy:
    needs: [metadata, define]
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}
      
      - name: Set Context
        run: docker context use ${{ needs.define.outputs.docker_context }}

      - name: Check stack
        run: echo "SERVICE=$(docker service ls | grep -c ${{ env.SERVICE_NAME }}[[:space:]])" >> $GITHUB_ENV

      - uses: actions/setup-node@v3
        if: env.SERVICE == 0
        with:
          node-version: '12'
          
      - name: Check Service Network
        if: env.SERVICE == 0
        id: network
        run: |
          docker network ls > tmp
          if grep -wq public tmp; then echo "::notice title=network exist::public network already exist" ; else echo "create=true" >> $GITHUB_OUTPUT; fi

      - name: Create Service Network
        if: steps.network.outputs.create
        run: docker network create -d overlay --attachable public

      - name: Pull Images
        run: docker pull ${{ needs.metadata.outputs.imageTag }}

      - name: Stack deploy
        if: env.SERVICE == 0
        run: |
          docker service create \
              --replicas 1 \
              --name ${{ env.SERVICE_NAME }} \
              --rollback-parallelism 1 \
              --rollback-delay 10s \
              --rollback-order start-first \
              --update-delay 10s \
              --update-parallelism 1 \
              --update-failure-action rollback \
              --restart-condition on-failure \
              --restart-delay 5s \
              --restart-max-attempts 2 \
              --env SERVICE_NAME=${{ env.SERVICE_NAME }} \
              --env PORT=${{ inputs.target_port }} \
              --env NODE_ENV=${{ needs.define.outputs.nodeEnv }} \
              --network public \
              --publish published=${{ needs.define.outputs.published_port }},target=${{ needs.define.outputs.target_port }},mode=ingress \
              --mount type=bind,source=/etc/timezone,target=/etc/timezone,readonly \
              --mount type=bind,source=/etc/localtime,target=/etc/localtime,readonly \
              --mount source=${{ env.SERVICE_NAME }}_logs,target=/usr/src/app/logs \
              --mount source=${{ env.SERVICE_NAME }}_tmp,target=/usr/src/app/tmp \
              ${{ needs.metadata.outputs.imageTag }}

      - name: Update current service
        if: env.SERVICE == 1
        run: docker service update --health-retries 3 --health-interval 5s --with-registry-auth --image ${{ needs.metadata.outputs.imageTag }} ${{ env.SERVICE_NAME }}
     
      - name: Restore Docker Context To Default
        run: docker context use default
